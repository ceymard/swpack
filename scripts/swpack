#!/usr/bin/env node

const webpack = require('webpack')
const path = require('path')
const colors = require('colors')
const merge = require('deepmerge')


const args = require('minimist')(process.argv.slice(2), {
  string: ['o'],
  boolean: ['w'],
  alias: {
    o: 'output',
    w: 'watch'
  }
})

const $configs = []

/**
 * For each entry, we are going to create a config Object.
 */
var $output_path = path.join(process.cwd(), args.o ? path.dirname(args.o) : '.')

for (var entry of args._) {

  var [src, dst] = entry.split(':')
  src = path.join(process.cwd(), src)
  dst = path.relative($output_path, dst)
  console.log(src, dst)

  var config = {
    cache: true,
    devtool: 'source-map',
    entry: {[dst]: src},
    stats: {children: false},
    node: {
      Buffer: false,
      global: false,
      process: false,
      setImmediate: false
    },
    output: {
      // path: $output_path,
      // publicPath: '/',
      filename: '[name]',
      sourceMapFilename: '[file].map'
    },
    context: path.join(__dirname, '..'),
    resolve: {
      extensions: ['.js', '.ts', '.tsx', '.css', '.styl']
    },
    module: {
      rules: [
        {test: /\.js$/, use: 'source-map-loader', enforce: 'pre'},
        {test: /\.tsx?$/, loader: 'ts-loader'}
      ]
    },
    plugins: [
      // Ignore the css .d.ts files created by typings-for-css-modules-loader
      new webpack.WatchIgnorePlugin([
        /css\.d\.ts$/
      ])
    ]
  }

  $configs.push(config)

}


var compiler = webpack($configs)

function err(msg) {
  console.log(colors.bold.red(' !!'), msg)
}


function handleStats(stats) {
  const s = stats.toJson('verbose')
  // console.log(stats.toJson('verbose'))
  if (stats.hasErrors()) {
    for (var e of s.errors) {
      err(e)
    }
    // console.log(colors.red(JSON.stringify(stats.toJson('minimal'))))
  } else {
    // console.log(s)
    var to_print = s.children ? s.children : [s]
    for (var t of to_print) {
      for (var a of t.assets) {
        console.log(colors.bold.green(' =>'), a.name, `(${colors.green(Math.round(a.size / 1024) + 'kb')})`)
      }
    }
  }
}

if (args.watch) {
  compiler.watch({}, (e, stats) => {
    if (!e)
      handleStats(stats)
    else err(JSON.stringify(e))
  })
} else {
  compiler.run((e, stats) => {
    if (!e)
      handleStats(stats)
    else
      err(JSON.stringify(e))
  })
}